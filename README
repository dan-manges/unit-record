= UnitRecord

This plugin provides unit testing for ActiveRecord by disconnecting tests from the database.

== Why?

Because using the database through ActiveRecord when testing domain models means tests are not focused enough.  Rails has its own test suite.  Your application unit tests should focus on testing your business logic in the class under test, not testing ActiveRecord.  Also, disconnecting from the database helps make the tests run much faster:

  Finished in 11.541093 seconds.
  3001 tests, 5325 assertions, 0 failures, 0 errors

== Requirements

* Rails >= 1.2

== Installation

The traditional way:
  ruby script/plugin install http://unit-test-ar.rubyforge.org/svn/trunk/unit_test_active_record/

Or with piston:
  piston import http://unit-test-ar.rubyforge.org/svn/trunk/unit_test_active_record/ vendor/plugins/unit_test_active_record

== Usage

=== Restructuring the Rails Test Directory

The Rails test directory typically places testing for models under <tt>test/unit</tt> and tests for controllers under <tt>test/functional</tt>.  However, we need to change the definition of unit and functional.  Controllers can be unit tested (tested with mocking out models and without rendering the view).  Also, models can be functionally tested (hitting the database).  Also, each type of test needs its own test_helper.  You should restructure your test directory like this:
  test
    test_helper.rb
    unit
      unit_test_helper.rb
      controllers
      models
    functional
      functional_test_helper.rb
      controllers
      models

You should move existing functional tests into functional/controllers.  You will also need to change the require line at the top of those tests to require the functional_test_helper.rb file instead of the test_helper.rb file.

The <tt>functional_test_helper.rb</tt> file should require <tt>test_helper.rb</tt> for now:
  require File.dirname(__FILE__) + "/../test_helper"

For moving unit tests, you have a few options.  I recommend moving them to unit/models and then disconnecting your unit tests from the database.  Any tests that fail should then be modified to not hit the database or moved to functional/models.

== Caching Columns

The plugin disconnects models from the database by caching the column metadata.  This is done through a rake task:
  rake db:columns:dump

The rake task creates a db/columns.rb file which will be used in the tests.  If you have a custom build/test rake task, you may just want to insert this task before you run your unit tests.  Otherwise, you can automatically have it run before <tt>test:units</tt> as so:
  Rake::Task["test:units"].enhance ["db:columns:dump"]

== Disconnecting

In the <tt>test/unit/unit_test_helper.rb</tt> file you created when restructuring your test directory, you should add these lines:
  require File.dirname(__FILE__) + "/../test_helper"
  ActiveRecord::Base.disconnect!
  
The <tt>disconnect!</tt> method will do everything necessary (including loading the columns.rb file) to run your unit tests without hitting the database.

== Thanks
Thanks to Jay Fields for the original implementation:
http://blog.jayfields.com/2007/03/rails-activerecord-unit-testing-part-ii.html

Copyright (c) 2007 Dan Manges, released under the MIT license.
