= UnitRecord

This plugin provides unit testing for ActiveRecord by disconnecting tests from the database.

== The Benefits

Rationale: http://www.dcmanges.com/blog/rails-unit-record-test-without-the-database

One huge benefit to disconnecting unit tests from the database is having a faster test suite.  Here is the benchmark from my current ThoughtWorks project:

  Finished in 11.541093 seconds.
  3001 tests, 5325 assertions, 0 failures, 0 errors

== Requirements

* Rails >= 1.2

== Installation

    gem install unit_record

== Usage

=== Restructuring the Rails Test Directory

The Rails test directory typically places testing for models under <tt>test/unit</tt> and tests for controllers under <tt>test/functional</tt>.  However, we need to change the definition of unit and functional.  Controllers can be unit tested (mocking out models and not rendering the view).  Models can be functionally tested (hitting the database).  Also, each type of test needs its own test_helper.  You should restructure your test directory like this:
  test
    test_helper.rb
    unit
      unit_test_helper.rb
      controllers
      models
    functional
      functional_test_helper.rb
      controllers
      models

You should move existing functional tests into functional/controllers.  You will also need to change the require line at the top of those tests to require the functional_test_helper.rb file instead of the test_helper.rb file.

The <tt>functional_test_helper.rb</tt> file should require <tt>test_helper.rb</tt> for now:
  require File.dirname(__FILE__) + "/../test_helper"

For moving unit tests, you have a few options.  I recommend moving them to unit/models and then disconnecting your unit tests from the database.  Any tests that fail should then be modified to not hit the database or moved to functional/models.

== Disconnecting

In the <tt>test/unit/unit_test_helper.rb</tt> file you created when restructuring your test directory, you should add these lines:
  require File.dirname(__FILE__) + "/../test_helper"
  require "unit_record"
  ActiveRecord::Base.disconnect!
  
The <tt>disconnect!</tt> method will do everything necessary to run your unit tests without hitting the database.  For now, it connects to the database and caches the columns in a file (db/columns.rb) before disconnecting.  A later version will not need to connect at all.

== Limitations

* UnitRecord currently only works when all models use convention for table names.

== Thanks
Thanks to Jay Fields for the original implementation:
http://blog.jayfields.com/2007/03/rails-activerecord-unit-testing-part-ii.html

== License
Released under Ruby's license.
http://www.ruby-lang.org/en/LICENSE.txt
